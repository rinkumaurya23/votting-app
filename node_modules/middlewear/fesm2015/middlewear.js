import { Injectable, EventEmitter, NgModule, InjectionToken, defineInjectable, inject } from '@angular/core';
import { HttpClient, HttpClientModule } from '@angular/common/http';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import { environment } from 'environments/environment';
/** @type {?} */
let environment;
class MiddlewareService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.items = new EventEmitter();
        this.facets = new EventEmitter();
        this.breadcrumbs = new EventEmitter();
    }
    /**
     * @param {?=} url
     * @return {?}
     */
    getCollectionByQuery(url) {
        url = url ? url : '';
        return this.http.get(environment.apiUrl + 'category/' + url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            console.log(data);
            /** @type {?} */
            const result = data.universes.universe[0];
            this.mapFredHopperProductsToProduct(result['items-section'].items.item);
            this.mapFredHopperFacetMapToFacetMap(result.facetmap[0].filter);
            this.mapFredHopperBreadcrumbsToBreadcrumbs(result.breadcrumbs);
        }));
    }
    /**
     * @param {?} breadcrumbObject
     * @return {?}
     */
    mapFredHopperBreadcrumbsToBreadcrumbs(breadcrumbObject) {
        this.breadcrumbs.emit(breadcrumbObject);
    }
    /**
     * @param {?} listOfFredHopperFacetMaps
     * @return {?}
     */
    mapFredHopperFacetMapToFacetMap(listOfFredHopperFacetMaps) {
        /** @type {?} */
        let facets = [];
        facets = listOfFredHopperFacetMaps;
        this.facets.emit(facets);
    }
    /**
     * @param {?} listOfFredHopperProducts
     * @return {?}
     */
    mapFredHopperProductsToProduct(listOfFredHopperProducts) {
        /** @type {?} */
        const items = [];
        listOfFredHopperProducts.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            const id = element.id;
            /** @type {?} */
            const nameElement = element.attribute.find((/**
             * @param {?} x
             * @return {?}
             */
            x => x.name = 'name'));
            /** @type {?} */
            const name = nameElement.value[0].value;
            /** @type {?} */
            const originalPriceElement = element.attribute.find((/**
             * @param {?} x
             * @return {?}
             */
            x => x.name === 'original_price'));
            /** @type {?} */
            const originalPrice = originalPriceElement.value[0].value;
            /** @type {?} */
            const currentPriceElement = element.attribute.find((/**
             * @param {?} x
             * @return {?}
             */
            x => x.name === 'price'));
            /** @type {?} */
            const salePrice = currentPriceElement.value[0].value !== originalPrice ? currentPriceElement.value[0].value : '';
            /** @type {?} */
            const imageElement = element.attribute.find((/**
             * @param {?} x
             * @return {?}
             */
            x => x.name === '_thumburl'));
            /** @type {?} */
            const image = imageElement.value[0].value;
            /** @type {?} */
            const brandElement = element.attribute.find((/**
             * @param {?} x
             * @return {?}
             */
            x => x.name === 'brand'));
            /** @type {?} */
            const brand = brandElement.value[0].value ? brandElement.value[0].value : '';
            items.push(new Product(id, name, image, originalPrice, salePrice, brand));
        }));
        this.items.emit(items);
    }
    /**
     * @param {?} url
     * @return {?}
     */
    navigateTo(url) {
        this.getCollectionByQuery(url);
    }
}
MiddlewareService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
MiddlewareService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ MiddlewareService.ngInjectableDef = defineInjectable({ factory: function MiddlewareService_Factory() { return new MiddlewareService(inject(HttpClient)); }, token: MiddlewareService, providedIn: "root" });
class Product {
    /**
     * @param {?} id
     * @param {?} name
     * @param {?} image
     * @param {?} originalPrice
     * @param {?=} salePrice
     * @param {?=} brand
     */
    constructor(id, name, image, originalPrice, salePrice, brand) {
        this.id = id;
        this.name = name;
        this.originalPrice = parseFloat(originalPrice.replace(/[^0-9\.-]+/g, ''));
        this.salePrice = parseFloat(salePrice.replace(/[^0-9\.-]+/g, ''));
        this.image = image;
        this.brand = brand;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const API_HOST = new InjectionToken('API_HOST');
class MiddlewearModule {
    /**
     * @param {?} host
     * @return {?}
     */
    static forRoot(host) {
        return {
            ngModule: MiddlewearModule,
            providers: [{
                    provide: API_HOST,
                    useValue: host
                }]
        };
    }
}
MiddlewearModule.decorators = [
    { type: NgModule, args: [{
                imports: [HttpClientModule],
                providers: [MiddlewareService],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MiddlewareService, Product, API_HOST, MiddlewearModule };

//# sourceMappingURL=middlewear.js.map