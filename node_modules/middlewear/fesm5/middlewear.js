import { Injectable, EventEmitter, NgModule, InjectionToken, defineInjectable, inject } from '@angular/core';
import { HttpClient, HttpClientModule } from '@angular/common/http';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import { environment } from 'environments/environment';
/** @type {?} */
var environment;
var MiddlewareService = /** @class */ (function () {
    function MiddlewareService(http) {
        this.http = http;
        this.items = new EventEmitter();
        this.facets = new EventEmitter();
        this.breadcrumbs = new EventEmitter();
    }
    /**
     * @param {?=} url
     * @return {?}
     */
    MiddlewareService.prototype.getCollectionByQuery = /**
     * @param {?=} url
     * @return {?}
     */
    function (url) {
        var _this = this;
        url = url ? url : '';
        return this.http.get(environment.apiUrl + 'category/' + url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            console.log(data);
            /** @type {?} */
            var result = data.universes.universe[0];
            _this.mapFredHopperProductsToProduct(result['items-section'].items.item);
            _this.mapFredHopperFacetMapToFacetMap(result.facetmap[0].filter);
            _this.mapFredHopperBreadcrumbsToBreadcrumbs(result.breadcrumbs);
        }));
    };
    /**
     * @param {?} breadcrumbObject
     * @return {?}
     */
    MiddlewareService.prototype.mapFredHopperBreadcrumbsToBreadcrumbs = /**
     * @param {?} breadcrumbObject
     * @return {?}
     */
    function (breadcrumbObject) {
        this.breadcrumbs.emit(breadcrumbObject);
    };
    /**
     * @param {?} listOfFredHopperFacetMaps
     * @return {?}
     */
    MiddlewareService.prototype.mapFredHopperFacetMapToFacetMap = /**
     * @param {?} listOfFredHopperFacetMaps
     * @return {?}
     */
    function (listOfFredHopperFacetMaps) {
        /** @type {?} */
        var facets = [];
        facets = listOfFredHopperFacetMaps;
        this.facets.emit(facets);
    };
    /**
     * @param {?} listOfFredHopperProducts
     * @return {?}
     */
    MiddlewareService.prototype.mapFredHopperProductsToProduct = /**
     * @param {?} listOfFredHopperProducts
     * @return {?}
     */
    function (listOfFredHopperProducts) {
        /** @type {?} */
        var items = [];
        listOfFredHopperProducts.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var id = element.id;
            /** @type {?} */
            var nameElement = element.attribute.find((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.name = 'name'; }));
            /** @type {?} */
            var name = nameElement.value[0].value;
            /** @type {?} */
            var originalPriceElement = element.attribute.find((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.name === 'original_price'; }));
            /** @type {?} */
            var originalPrice = originalPriceElement.value[0].value;
            /** @type {?} */
            var currentPriceElement = element.attribute.find((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.name === 'price'; }));
            /** @type {?} */
            var salePrice = currentPriceElement.value[0].value !== originalPrice ? currentPriceElement.value[0].value : '';
            /** @type {?} */
            var imageElement = element.attribute.find((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.name === '_thumburl'; }));
            /** @type {?} */
            var image = imageElement.value[0].value;
            /** @type {?} */
            var brandElement = element.attribute.find((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.name === 'brand'; }));
            /** @type {?} */
            var brand = brandElement.value[0].value ? brandElement.value[0].value : '';
            items.push(new Product(id, name, image, originalPrice, salePrice, brand));
        }));
        this.items.emit(items);
    };
    /**
     * @param {?} url
     * @return {?}
     */
    MiddlewareService.prototype.navigateTo = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        this.getCollectionByQuery(url);
    };
    MiddlewareService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    MiddlewareService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ MiddlewareService.ngInjectableDef = defineInjectable({ factory: function MiddlewareService_Factory() { return new MiddlewareService(inject(HttpClient)); }, token: MiddlewareService, providedIn: "root" });
    return MiddlewareService;
}());
var Product = /** @class */ (function () {
    function Product(id, name, image, originalPrice, salePrice, brand) {
        this.id = id;
        this.name = name;
        this.originalPrice = parseFloat(originalPrice.replace(/[^0-9\.-]+/g, ''));
        this.salePrice = parseFloat(salePrice.replace(/[^0-9\.-]+/g, ''));
        this.image = image;
        this.brand = brand;
    }
    return Product;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var API_HOST = new InjectionToken('API_HOST');
var MiddlewearModule = /** @class */ (function () {
    function MiddlewearModule() {
    }
    /**
     * @param {?} host
     * @return {?}
     */
    MiddlewearModule.forRoot = /**
     * @param {?} host
     * @return {?}
     */
    function (host) {
        return {
            ngModule: MiddlewearModule,
            providers: [{
                    provide: API_HOST,
                    useValue: host
                }]
        };
    };
    MiddlewearModule.decorators = [
        { type: NgModule, args: [{
                    imports: [HttpClientModule],
                    providers: [MiddlewareService],
                },] }
    ];
    return MiddlewearModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MiddlewareService, Product, API_HOST, MiddlewearModule };

//# sourceMappingURL=middlewear.js.map