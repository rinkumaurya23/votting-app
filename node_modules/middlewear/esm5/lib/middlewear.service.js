/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, EventEmitter } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
// import { environment } from 'environments/environment';
/** @type {?} */
var environment;
var MiddlewareService = /** @class */ (function () {
    function MiddlewareService(http) {
        this.http = http;
        this.items = new EventEmitter();
        this.facets = new EventEmitter();
        this.breadcrumbs = new EventEmitter();
    }
    /**
     * @param {?=} url
     * @return {?}
     */
    MiddlewareService.prototype.getCollectionByQuery = /**
     * @param {?=} url
     * @return {?}
     */
    function (url) {
        var _this = this;
        url = url ? url : '';
        return this.http.get(environment.apiUrl + 'category/' + url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            console.log(data);
            /** @type {?} */
            var result = data.universes.universe[0];
            _this.mapFredHopperProductsToProduct(result['items-section'].items.item);
            _this.mapFredHopperFacetMapToFacetMap(result.facetmap[0].filter);
            _this.mapFredHopperBreadcrumbsToBreadcrumbs(result.breadcrumbs);
        }));
    };
    /**
     * @param {?} breadcrumbObject
     * @return {?}
     */
    MiddlewareService.prototype.mapFredHopperBreadcrumbsToBreadcrumbs = /**
     * @param {?} breadcrumbObject
     * @return {?}
     */
    function (breadcrumbObject) {
        /** @type {?} */
        var breadcrumbs = [];
        this.breadcrumbs.emit(breadcrumbObject);
    };
    /**
     * @param {?} listOfFredHopperFacetMaps
     * @return {?}
     */
    MiddlewareService.prototype.mapFredHopperFacetMapToFacetMap = /**
     * @param {?} listOfFredHopperFacetMaps
     * @return {?}
     */
    function (listOfFredHopperFacetMaps) {
        /** @type {?} */
        var facets = [];
        facets = listOfFredHopperFacetMaps;
        this.facets.emit(facets);
    };
    /**
     * @param {?} listOfFredHopperProducts
     * @return {?}
     */
    MiddlewareService.prototype.mapFredHopperProductsToProduct = /**
     * @param {?} listOfFredHopperProducts
     * @return {?}
     */
    function (listOfFredHopperProducts) {
        /** @type {?} */
        var items = [];
        listOfFredHopperProducts.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var id = element.id;
            /** @type {?} */
            var nameElement = element.attribute.find((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.name = 'name'; }));
            /** @type {?} */
            var name = nameElement.value[0].value;
            /** @type {?} */
            var originalPriceElement = element.attribute.find((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.name === 'original_price'; }));
            /** @type {?} */
            var originalPrice = originalPriceElement.value[0].value;
            /** @type {?} */
            var currentPriceElement = element.attribute.find((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.name === 'price'; }));
            /** @type {?} */
            var salePrice = currentPriceElement.value[0].value !== originalPrice ? currentPriceElement.value[0].value : '';
            /** @type {?} */
            var imageElement = element.attribute.find((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.name === '_thumburl'; }));
            /** @type {?} */
            var image = imageElement.value[0].value;
            /** @type {?} */
            var brandElement = element.attribute.find((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.name === 'brand'; }));
            /** @type {?} */
            var brand = brandElement.value[0].value ? brandElement.value[0].value : '';
            items.push(new Product(id, name, image, originalPrice, salePrice, brand));
        }));
        this.items.emit(items);
    };
    /**
     * @param {?} url
     * @return {?}
     */
    MiddlewareService.prototype.navigateTo = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        this.getCollectionByQuery(url);
    };
    MiddlewareService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    MiddlewareService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ MiddlewareService.ngInjectableDef = i0.defineInjectable({ factory: function MiddlewareService_Factory() { return new MiddlewareService(i0.inject(i1.HttpClient)); }, token: MiddlewareService, providedIn: "root" });
    return MiddlewareService;
}());
export { MiddlewareService };
if (false) {
    /** @type {?} */
    MiddlewareService.prototype.items;
    /** @type {?} */
    MiddlewareService.prototype.facets;
    /** @type {?} */
    MiddlewareService.prototype.breadcrumbs;
    /**
     * @type {?}
     * @private
     */
    MiddlewareService.prototype.http;
}
var Product = /** @class */ (function () {
    function Product(id, name, image, originalPrice, salePrice, brand) {
        this.id = id;
        this.name = name;
        this.originalPrice = parseFloat(originalPrice.replace(/[^0-9\.-]+/g, ''));
        this.salePrice = parseFloat(salePrice.replace(/[^0-9\.-]+/g, ''));
        this.image = image;
        this.brand = brand;
    }
    return Product;
}());
export { Product };
if (false) {
    /** @type {?} */
    Product.prototype.id;
    /** @type {?} */
    Product.prototype.name;
    /** @type {?} */
    Product.prototype.originalPrice;
    /** @type {?} */
    Product.prototype.salePrice;
    /** @type {?} */
    Product.prototype.image;
    /** @type {?} */
    Product.prototype.brand;
}
//# sourceMappingURL=data:application/json;base64,