{"version":3,"sources":["ng://middlewear/lib/middlewear.service.ts","ng://middlewear/lib/middlewear.module.ts"],"names":["MiddlewareService","prototype","getCollectionByQuery","url","_this","this","http","get","environment","apiUrl","subscribe","data","console","log","result","universes","universe","mapFredHopperProductsToProduct","items","item","mapFredHopperFacetMapToFacetMap","facetmap","filter","mapFredHopperBreadcrumbsToBreadcrumbs","breadcrumbs","breadcrumbObject","emit","listOfFredHopperFacetMaps","facets","listOfFredHopperProducts","forEach","element","id","name","attribute","find","x","value","originalPrice","currentPriceElement","salePrice","image","brandElement","brand","push","Product","navigateTo","Injectable","args","providedIn","HttpClient","EventEmitter","parseFloat","replace","API_HOST","InjectionToken","MiddlewearModule","forRoot","host","ngModule","providers","provide","useValue","NgModule","imports","HttpClientModule"],"mappings":"6UAMAA,GAUEA,EAAAC,UAAAC,qBAAA,SAAqBC,GAArB,IAAAC,EAAAC,KAEE,OADAF,EAAMA,GAAY,GACXE,KAAKC,KAAKC,UAfjBC,GAeiCC,OAAS,YAAcN,GAAKO,UAAS,SACnEC,GACCC,QAAQC,IAAIF,OACNG,EAASH,EAAKI,UAAUC,SAAS,GACvCZ,EAAKa,+BAA+BH,EAAO,iBAAiBI,MAAMC,MAClEf,EAAKgB,gCAAgCN,EAAOO,SAAS,GAAGC,QACxDlB,EAAKmB,sCAAsCT,EAAOU,gBAItDxB,EAAAC,UAAAsB,sCAAA,SAAsCE,GAGpCpB,KAAKmB,YAAYE,KAAKD,IAGxBzB,EAAAC,UAAAmB,gCAAA,SAAgCO,OAC1BC,EACJA,EAASD,EACTtB,KAAKuB,OAAOF,KAAKE,IAInB5B,EAAAC,UAAAgB,+BAAA,SAA+BY,OACvBX,EAAQ,GACdW,EAAyBC,QAAO,SAACC,OACzBC,EAAKD,EAAQC,GAEbC,EADcF,EAAQG,UAAUC,KAAI,SAACC,GAAK,OAAAA,EAAEH,KAAO,SAChCI,MAAM,GAAGA,MAE5BC,EADuBP,EAAQG,UAAUC,KAAI,SAACC,GAAK,MAAW,mBAAXA,EAAEH,OAChBI,MAAM,GAAGA,MAC9CE,EAAsBR,EAAQG,UAAUC,KAAI,SAACC,GAAK,MAAW,UAAXA,EAAEH,OACpDO,EAAYD,EAAoBF,MAAM,GAAGA,QAAUC,EAAgBC,EAAoBF,MAAM,GAAGA,MAAQ,GAExGI,EADeV,EAAQG,UAAUC,KAAI,SAACC,GAAK,MAAW,cAAXA,EAAEH,OACxBI,MAAM,GAAGA,MAC9BK,EAAeX,EAAQG,UAAUC,KAAI,SAACC,GAAK,MAAW,UAAXA,EAAEH,OAC7CU,EAAQD,EAAaL,MAAM,GAAGA,MAAQK,EAAaL,MAAM,GAAGA,MAAQ,GAC1EnB,EAAM0B,KAAK,IAAIC,EAAQb,EAAIC,EAAMQ,EAAOH,EAAeE,EAAYG,MAErEtC,KAAKa,MAAMQ,KAAKR,IAGlBlB,EAAAC,UAAA6C,WAAA,SAAW3C,GACTE,KAAKH,qBAAqBC,wBAvD/B4C,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDANLC,EAAAA,4IAaP,SAAAlD,EAA6BM,GAAAD,KAAAC,KAAAA,EAJ7BD,KAAAa,MAAQ,IAAIiC,EAAAA,aACZ9C,KAAAuB,OAAS,IAAIuB,EAAAA,aACb9C,KAAAmB,YAAc,IAAI2B,EAAAA,mBAsDlB,SAAAN,EAAYb,EAAIC,EAAMQ,EAAOH,EAAeE,EAAaG,GACvDtC,KAAK2B,GAAKA,EACV3B,KAAK4B,KAAOA,EACZ5B,KAAKiC,cAAgBc,WAAWd,EAAce,QAAQ,cAAe,KACrEhD,KAAKmC,UAAYY,WAAWZ,EAAUa,QAAQ,cAAe,KAC7DhD,KAAKoC,MAAQA,EACbpC,KAAKsC,MAAQA,GCrEJW,EAAW,IAAIC,EAAAA,eAAe,YAE3CC,GAKSA,EAAAC,QAAP,SAAeC,GACb,MAAO,CACLC,SAAUH,EACVI,UAAW,CAAC,CACVC,QAASP,EACTQ,SAAUJ,0BAVjBK,EAAAA,SAAQf,KAAA,CAAC,CACRgB,QAAS,CAACC,EAAAA,kBACVL,UAAW,CAAC5D,OAYdwD,GAdA,SAAAA","sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n// import { environment } from 'environments/environment';\nlet environment;\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MiddlewareService {\n  items = new EventEmitter();\n  facets = new EventEmitter();\n  breadcrumbs = new EventEmitter();\n\n  constructor(private readonly http: HttpClient) { }\n\n  getCollectionByQuery(url?: string) {\n    url = url ? url : '';\n    return this.http.get(environment.apiUrl + 'category/' + url).subscribe(\n      (data: any) => {\n        console.log(data);\n        const result = data.universes.universe[0];\n        this.mapFredHopperProductsToProduct(result['items-section'].items.item);\n        this.mapFredHopperFacetMapToFacetMap(result.facetmap[0].filter);\n        this.mapFredHopperBreadcrumbsToBreadcrumbs(result.breadcrumbs);\n      });\n    }\n\n    mapFredHopperBreadcrumbsToBreadcrumbs(breadcrumbObject) {\n      const breadcrumbs = [];\n\n      this.breadcrumbs.emit(breadcrumbObject);\n    }\n\n    mapFredHopperFacetMapToFacetMap(listOfFredHopperFacetMaps: Array<any>) {\n      let facets = [];\n      facets = listOfFredHopperFacetMaps;\n      this.facets.emit(facets);\n\n    }\n\n    mapFredHopperProductsToProduct(listOfFredHopperProducts) {\n      const items = [];\n      listOfFredHopperProducts.forEach(element => {\n        const id = element.id;\n        const nameElement = element.attribute.find(x => x.name = 'name');\n        const name = nameElement.value[0].value;\n        const originalPriceElement = element.attribute.find(x => x.name === 'original_price');\n        const originalPrice = originalPriceElement.value[0].value;\n        const currentPriceElement = element.attribute.find(x => x.name === 'price');\n        const salePrice = currentPriceElement.value[0].value !== originalPrice ? currentPriceElement.value[0].value : '';\n        const imageElement = element.attribute.find(x => x.name === '_thumburl');\n        const image = imageElement.value[0].value;\n        const brandElement = element.attribute.find(x => x.name === 'brand');\n        const brand = brandElement.value[0].value ? brandElement.value[0].value : '';\n        items.push(new Product(id, name, image, originalPrice, salePrice,  brand));\n      });\n      this.items.emit(items);\n    }\n\n    navigateTo(url) {\n      this.getCollectionByQuery(url);\n    }\n}\n\nexport class Product {\n  constructor(id, name, image, originalPrice, salePrice?,  brand?) {\n    this.id = id;\n    this.name = name;\n    this.originalPrice = parseFloat(originalPrice.replace(/[^0-9\\.-]+/g, ''));\n    this.salePrice = parseFloat(salePrice.replace(/[^0-9\\.-]+/g, ''));\n    this.image = image;\n    this.brand = brand;\n\n  }\n  id: string;\n  name: string;\n  originalPrice: number;\n  salePrice?: number;\n  image: string;\n  brand?: string;\n}\n","import { NgModule, InjectionToken } from '@angular/core';\nimport { MiddlewareService } from './middlewear.service';\nimport { HttpClientModule } from '@angular/common/http';\nexport const API_HOST = new InjectionToken('API_HOST');\n\n@NgModule({\n  imports: [HttpClientModule],\n  providers: [MiddlewareService],\n})\nexport class MiddlewearModule {\n  static forRoot(host: string) {\n    return {\n      ngModule: MiddlewearModule,\n      providers: [{\n        provide: API_HOST,\n        useValue: host\n      }]\n    };\n  }\n}\n"]}